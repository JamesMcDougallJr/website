{
  "experience": [
    {
      "title": "cirrascale",
      "links": ["https://cirrascale.com"],
      "skills": [
        {
          "title": "Docker",
          "description": "I created Docker containers for deploying Tensorflow model training scripts to a multi gpu cluster."
        },
        {
          "title": "Tensorflow",
          "description": "I had a light introduction to Tensorflow. I implemented an object detection script for use in a self driving car simulation."
        },
        {
          "title": "Kubernetes",
          "description": "I created a pod for each GPU in a cluster, then used these pods to run parallel computations in containers."
        }
      ],
      "post": "I was an intern at Cirrascale Cloud Services Summer 2019 in Kearny Mesa, California. I worked on two main projects: a data pipeline for self driving cars, and a server monitoring program. The data pipeline involved creating Docker containers for training, inferencing, and simulation testing Tensorflow models. I used Kubernetes to manage training jobs on a DGX server with 8 GPUs. For the server monitoring tool, I used Dell's Redfish API as well as Ipmitool to get temperature and power data from almost 300 servers. I then used a tool called Emoncms to create real time graphs for the data. I created a graph for each server's power and temperature. Then, we exposed a public ip address for customers to view their own servers."
    },
    {
      "title": "tutoring",
      "links": [],
      "skills": [{ "title": "C++", "description": "I helped students debug C++ code" }],
      "post": "During the first quarter of 2019, I was a tutor for CSE 100, an advanced data structures in C++ class. I assisted students during lab hours by talking through their program bugs and guiding them through C++ documentation. I used my knowledge of C++ syntax to give them tips and help with design. I used my knowledge of data structures in C++ to help students draw diagrams and perform structure operations."
    },
    {
      "title": "sdsc",
      "links": ["https://sdsc.ucsd.edu"],
      "skills": [
        {
          "title": "Bash",
          "description": "All programming for this project is done in Bash. I did a lot of capturing command output, loops, and curl requests."
        }
      ],
      "post": "I began working at the San Diego Supercomputer Center Fall 2019. I have been working on a secure Jupyter Notebook Service. Users for the Comet supercomputer currently run unencrypted code in Jupyter notebooks. These notebooks typically aren't massive training jobs and require a few cpu hours. We want to prevent malicious users from spying on unencrypted code in shared Comet nodes. As such, we implemented a script that interacts with a reverse proxy and redirect slurm jobs through this proxy."
    }
  ],
  "project": [
    {
      "title": "security-camera",
      "skills": [
        {
          "title": "Docker",
          "description": "I used Docker with docker-compose to build and deploy images to the Pi and Heroku."
        },
        {
          "title": "Networking",
          "description": "I used multiple network layers to redirect and forward traffic, exposing a local server to the internet."
        }
      ],
      "post": "I made an IOT security cam with a raspberry Pi 3. A Flask server running on the Pi grabs a video feed and exposes it on a local port. Then, an Nginx reverse proxy will redirect any http default traffic (port 80) to this port. To make the video feed avaiable to the internet, I then set up port forwarding on my home router so that I could use the router's public IP address to get the video feed from my Heroku site. The Heroku site is a basic Node application that gets the video and displays it, with some basic Google auth so I don't have just anyone looking at my feed. The hardest part of the project was creating the docker images on the raspberry pi, which took longer to build than I expected and thus made errors take longer to fix than they should have.",
      "links": ["https://security-cam.herokuapp.com"]
    },
    {
      "title": "clubhouse",
      "skills": [
        {
          "title": "Docker",
          "description": "I containerized our application for deployment. This way I could verify that if that application worked locally in Docker, it would also work in Heroku."
        },
        {
          "title": "Heroku",
          "description": "I set up a Heroku app to make our app publicly available. I configured it with a mail api add on to enhance our app. I deployed to Heroku using a heroku.yml file."
        },
        {
          "title": "Flask",
          "description": "I defined api endpoints and webpage routes."
        },
        {
          "title": "HTML5",
          "description": "I created webpages using html and css."
        },
        {
          "title": "Jinja",
          "description": "I used Jinja as a templating engine to create reuseable components for cards and forms"
        },
        {
          "title": "Postgres",
          "description": "I wrote controller functions for accessing the database, and interacted with the database in TablePlus."
        }
      ],
      "post": "For CSE 110, I was the project manager of the Student Advocate Developers. I organized our weekly meetings, led software development, and contributed significantly. I contributed to the full stack of development, from the database layer, to the middlware, frontend, and deployment.\nMy main accomplishment was the implementation of the API for the app. I created endpoints for getting images from the database using many different types of data. I wanted this get image function to be able to take multiple different kinds of data and return the right image. For example, sometimes I only had an event ID, and other times I had the event name and I wanted the same image to be returned. All in all, I'm proud of the project. I learned about templating, JavaScript, Postgres, and the importance of creating an API over the course of 10 weeks.",
      "links": ["https://github.com/JamesMcDougallJr/CSE110.git"]
    }
  ]
}
